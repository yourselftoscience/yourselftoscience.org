name: Create Release and Update DOI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'src/app/layout.tsx'
      - 'scripts/updatePdfPage.js'

permissions:
  contents: write  # Required for creating releases

jobs:
  check-if-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "Proceeding with workflow"
    outputs:
      should_continue: "true"

  check-and-release:
    needs: check-if-skip
    if: needs.check-if-skip.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
    outputs:
      new_doi: ${{ steps.get_doi.outputs.doi }}
      release_created: ${{ steps.release_status.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get date for release
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Yourself To Science - ${{ steps.date.outputs.date }}
          tag_name: v${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
          files: |
            public/yourselftoscience.pdf
            public/sitemap.xml
          body: |
            This release includes:
            - Updated resources list
            - Enhanced citation information
            - Latest content as of ${{ steps.date.outputs.date }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set release created flag
        run: echo "release_created=true" >> $GITHUB_OUTPUT
        id: release_status
          
      - name: Wait for Zenodo to process
        run: |
          echo "Waiting for Zenodo to process the new release..."
          sleep 180
          
      - name: Wait for and check Zenodo DOI
        id: get_doi
        run: |
          echo "Waiting for and checking Zenodo DOI..."
          
          # Try up to 8 times with 20-second intervals (max 160 seconds total)
          for attempt in {1..8}; do
            echo "Attempt $attempt of 8..."
            
            # Try community API endpoint
            ZENODO_RECORD=$(curl -s "https://zenodo.org/api/communities/github/records?q=github.repository:yourselftoscience/yourselftoscience.org&sort=mostrecent&size=1")
            HITS_COUNT=$(echo $ZENODO_RECORD | jq -r '.hits.total')
            
            if [[ "$HITS_COUNT" != "0" && ! -z "$HITS_COUNT" ]]; then
              echo "Found record in Zenodo GitHub community!"
              VERSION_DOI=$(echo $ZENODO_RECORD | jq -r '.hits.hits[0].doi // ""')
              if [[ -n "$VERSION_DOI" ]]; then
                echo "doi=$VERSION_DOI" >> $GITHUB_OUTPUT
                echo "Retrieved DOI: $VERSION_DOI"
                exit 0
              fi
            fi
            
            # Try direct DOI query
            ZENODO_RECORD=$(curl -s "https://zenodo.org/api/records/15109360")
            VERSION_DOI=$(echo $ZENODO_RECORD | jq -r '.doi // ""')
            
            if [[ -n "$VERSION_DOI" ]]; then
              echo "Found record via direct DOI query!"
              echo "doi=$VERSION_DOI" >> $GITHUB_OUTPUT
              echo "Retrieved DOI: $VERSION_DOI"
              exit 0
            fi
            
            echo "No record found yet. Waiting 20 seconds before next attempt..."
            sleep 20
          done
          
          # Always ensure we have a DOI (use hardcoded fallback if needed)
          VERSION_DOI="10.5281/zenodo.15109360"
          echo "doi=$VERSION_DOI" >> $GITHUB_OUTPUT
          echo "Using hardcoded DOI: $VERSION_DOI"