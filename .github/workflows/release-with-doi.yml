name: Create Release and Update DOI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'src/app/layout.tsx'
      - 'scripts/updatePdfPage.js'

permissions:
  contents: write  # Required for creating releases

jobs:
  check-if-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "Proceeding with workflow"
    outputs:
      should_continue: "true"

  check-and-release:
    needs: check-if-skip
    if: needs.check-if-skip.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
    outputs:
      new_doi: ${{ steps.get_doi.outputs.doi }}
      release_created: ${{ steps.release_status.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get date for release
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Yourself To Science - ${{ steps.date.outputs.date }}
          tag_name: v${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
          files: |
            public/yourselftoscience.pdf
            public/sitemap.xml
          body: |
            This release includes:
            - Updated resources list
            - Enhanced citation information
            - Latest content as of ${{ steps.date.outputs.date }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set release created flag
        run: echo "release_created=true" >> $GITHUB_OUTPUT
        id: release_status
          
      - name: Wait for Zenodo to process
        run: |
          echo "Waiting for Zenodo to process the new release..."
          sleep 180
          
      - name: Get DOI from Zenodo
        id: get_doi
        run: |
          # Try the new API endpoint first
          ZENODO_RECORD=$(curl -s "https://zenodo.org/api/communities/github/records?q=github.repository:yourselftoscience/yourselftoscience.org&sort=mostrecent&size=1")
          
          # Check if we got results
          HITS_COUNT=$(echo $ZENODO_RECORD | jq -r '.hits.total')
          
          if [[ "$HITS_COUNT" == "0" || -z "$HITS_COUNT" ]]; then
            # Try direct DOI query with your known DOI
            echo "Trying direct DOI query..."
            ZENODO_RECORD=$(curl -s "https://zenodo.org/api/records/15109360")
            
            # Extract DOIs from direct response
            VERSION_DOI=$(echo $ZENODO_RECORD | jq -r '.doi // "10.5281/zenodo.placeholder"')
            CONCEPT_DOI="10.5281/zenodo.15109359"  # Hardcoded from your Zenodo dashboard
          else
            # Extract DOIs from search results
            VERSION_DOI=$(echo $ZENODO_RECORD | jq -r '.hits.hits[0].doi // "10.5281/zenodo.placeholder"')
            CONCEPT_DOI=$(echo $ZENODO_RECORD | jq -r '.hits.hits[0].conceptdoi // "10.5281/zenodo.placeholder"')
          fi
          
          # Ensure DOIs have the proper prefix if needed
          if [[ "$VERSION_DOI" != "10.5281/zenodo.placeholder" && "$VERSION_DOI" != "" && ! "$VERSION_DOI" =~ ^10\. ]]; then
            VERSION_DOI="10.5281/zenodo.$VERSION_DOI"
          fi
          
          # Use hardcoded values as ultimate fallback
          if [[ "$VERSION_DOI" == "10.5281/zenodo.placeholder" || "$VERSION_DOI" == "" ]]; then
            VERSION_DOI="10.5281/zenodo.15109360"
            CONCEPT_DOI="10.5281/zenodo.15109359"
            echo "Using hardcoded DOIs as fallback"
          fi
          
          # Store both DOIs
          echo "doi=$VERSION_DOI" >> $GITHUB_OUTPUT
          echo "concept_doi=$CONCEPT_DOI" >> $GITHUB_OUTPUT
          echo "Retrieved Version DOI: $VERSION_DOI"
          echo "Retrieved Concept DOI: $CONCEPT_DOI"
          
      - name: Wait and check for Zenodo processing
        id: zenodo_check
        run: |
          echo "Checking for Zenodo record..."
          
          # Try up to 5 times with 20-second intervals (total max wait: 100 seconds)
          for attempt in {1..5}; do
            echo "Attempt $attempt of 5..."
            
            # Try the community API endpoint
            ZENODO_RECORD=$(curl -s "https://zenodo.org/api/communities/github/records?q=github.repository:yourselftoscience/yourselftoscience.org&sort=mostrecent&size=1")
            HITS_COUNT=$(echo $ZENODO_RECORD | jq -r '.hits.total')
            
            if [[ "$HITS_COUNT" != "0" && ! -z "$HITS_COUNT" ]]; then
              echo "Found record in Zenodo GitHub community!"
              echo "found=true" >> $GITHUB_OUTPUT
              break
            fi
            
            # Try direct DOI query
            ZENODO_RECORD=$(curl -s "https://zenodo.org/api/records/15109360")
            VERSION_DOI=$(echo $ZENODO_RECORD | jq -r '.doi // ""')
            
            if [[ -n "$VERSION_DOI" ]]; then
              echo "Found record via direct DOI query!"
              echo "found=true" >> $GITHUB_OUTPUT
              break
            fi
            
            echo "No record found yet. Waiting 20 seconds before next attempt